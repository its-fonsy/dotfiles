#!/usr/bin/env sh

# usage: compress_lecture MKV_DIR

# Compress all .mkv files inside the folder and subfolder of MKV_DIR.
# Update a file MKV_DIR/.data_size with the size in MB of the MKV and WEBM.
# Generate a MKV_DIR/rm_list file with the list of all .mkv compressed, that can
# to delete them with
# 		xargs rm -f < MKV_DIR/rm_list

help() {

	# help and usage message
	echo -e "usage: "$(basename $0)" [OPTIONS] MKV_DIR\n"

	echo "Compress all .mkv files inside the folder and subfolder of MKV_DIR."
	echo "Update a file MKV_DIR/.data_size with the size in MB of the MKV and WEBM."
	echo
	echo "OPTIONS"
	echo "  -h --help    print this help message"
	echo "  -r           generate MKV_DIR/rm_list a file with the list of all .mkv compressed"

	exit 0
}

function gen_rm_list() {
	echo -ne "\e[1;33m ->\e[0m\e[1m Generating the rm_list\e[0m\n"
	rm_list=""
	for vid in $mkv_files; do
		if test -e "${vid%%.mkv}.webm"; then
			rm_list="$rm_list $vid"
		fi
	done
	echo $rm_list > $video_dir/rm_list
}

# reading line arguments
generate_rm_list=0
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h|--help) help ;;
        -r) generate_rm_list=1 ;;
         *) video_dir="$1" ;;
    esac
	shift
done

# Verify the user is correctly using this script
test -d "$video_dir" || { echo "ERROR: $1 is not a video directory"; exit 1; }

video_to_compress=""
mkv_files=$(find $video_dir -type f -name "*.mkv" ! -path "$video_dir/.tmp/*" | sort)

# List the video that will be compressed
# echo -ne ":: Scanning the folder..."
echo -ne "\e[1;34m::\e[0m\e[1m Scanning the folder...\e[0m\n"
for vid in $mkv_files; do
	# be sure the video is not already compressed
	if test ! -e "${vid%%.mkv}.webm"; then
		video_to_compress="$video_to_compress $vid"
	fi
done

# if there is none video to compress exit
if test ! -n "$video_to_compress"; then
	echo " There is no file to compress"
	test $generate_rm_list -eq 1 && gen_rm_list
	exit 0 
fi 

# display the video to convert
echo -ne "\e[1;33m ->\e[0m\e[1m List of video to compress\e[0m\n"
for vid in $video_to_compress; do
	echo -e "    ${vid##*/}"
done

# start compressing if the user confirm
echo -ne "\n\e[1;34m::\e[0m\e[1m Compress all video? [y/n] \e[0m"

read ans
test ! $ans = "y" && exit 0

echo -ne "\e[1;33m ->\e[0m\e[1m Start compressing\e[0m\n"
for vid in $video_to_compress; do
	echo -e " compressing ${vid##*/}"
	ffpb -i $vid -filter:v fps=1 -b:a 16k -max_muxing_queue_size 1024 ${vid%%.mkv}.webm
done
echo -ne "\e[1;33m ->\e[0m\e[1m Done compressing\e[0m\n"

# Check that every compression has been done correctly
echo -ne "\e[1;33m ->\e[0m\e[1m Checking for errors\e[0m\n"
for vid in $video_to_compress; do
    webm_size="$(du -sh "${vid%%.mkv}.webm" | cut -f 1)"

	# If file size is 0, that means the conversion failed
	if test "$webm_size" = '0'; then
		echo "	Maybe ${vid%%.mkv}.webm is corrupted"
	fi
done

echo -ne "\e[1;33m ->\e[0m\e[1m Updating the data_size file\e[0m\n"
for vid in $video_to_compress; do
    mkv_size="$(du -sh $vid| cut -f 1)"
    webm_size="$(du -sh "${vid%%.mkv}.webm" | cut -f 1)"
    echo -e "${vid##*/}\t$mkv_size\t$webm_size" | sed 's/\.mkv//' | sed 's/M//g' >> $video_dir/.data_size
done

sort -o $video_dir/.data_size $video_dir/.data_size 

test $generate_rm_list -eq 1 && gen_rm_list

exit 0
